<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://coding-coconut.com</id>
    <title>Coding Coconut • Posts by &#34;ci/cd&#34; category</title>
    <link href="https://coding-coconut.com" />
    <updated>2021-02-05T00:00:04.000Z</updated>
    <category term="certbot" />
    <category term="aws" />
    <category term="배포" />
    <category term="dns" />
    <category term="github_page" />
    <category term="domain" />
    <category term="hexo" />
    <category term="error" />
    <category term="docker" />
    <category term="issue" />
    <category term="custom_domain" />
    <category term="hexo_deploy" />
    <category term="ssh" />
    <category term="terminal" />
    <category term="cmd" />
    <category term="bash" />
    <category term="https" />
    <category term="인증서" />
    <category term="apache" />
    <category term="pm2" />
    <category term="ubuntu" />
    <category term="podman" />
    <category term="dontstarve" />
    <category term="modding" />
    <category term="스크랩" />
    <category term="잡담" />
    <category term="비동기" />
    <category term="asyncawait" />
    <category term="postman" />
    <category term="속도 개선" />
    <entry>
        <id>https://coding-coconut.com/post/clgyf00n50009685o6vo748i9/</id>
        <title>Docker 명령어 정리</title>
        <link rel="alternate" href="https://coding-coconut.com/post/clgyf00n50009685o6vo748i9/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Docker_%28container_engine%29_logo.svg/1200px-Docker_%28container_engine%29_logo.svg.png&#34; alt=&#34;titleimg&#34;&gt;&lt;/p&gt;
&lt;p&gt;도커를 한번 써 보니 생각보다 서버를 운영하는 데 편리하고 컨테이너 단위 관리가 용이해서, 이를 잊어버리는 일이 없도록 실행부터 가동 중지까지, 방법을 정리하려고 한다.&lt;/p&gt;
&lt;h3 id=&#34;1-서버-이미지-만들기&#34;&gt;&lt;a href=&#34;#1-서버-이미지-만들기&#34; class=&#34;headerlink&#34; title=&#34;1. 서버 이미지 만들기&#34;&gt;&lt;/a&gt;1. 서버 이미지 만들기&lt;/h3&gt;&lt;p&gt;서버 구축 후, 프로젝트 폴더를 Shift + 우클릭하여 cmd(명령 프롬프트 창) 실행&lt;/p&gt;
&lt;p&gt;Docker Desktop 이 설치되어있고, 가동시켜서 현재 서비스가 돌아가고 있다는 전제 하에 아래의 명령어를 입력&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker build -t [생성할 이미지명] .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;생성할 이미지명 예시 : ex) MyContainer&lt;/p&gt;
&lt;p&gt;온점까지 제대로 입력해야한다.&lt;br&gt;해당 명령어를 실행하면, 도커가 프로젝트의 Dockerfile 이 제대로 작성되었다는 가정하에 Dockerfile 내부의 명령어를 실행시켜 컨테이너를 구축한다. 실행 예시는 다음 링크를 참조 &lt;a href=&#34;https://hexo.io&#34;&gt;[링크]:도커파일 작성하기(Node.js Express)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-이미지-실행하기&#34;&gt;&lt;a href=&#34;#2-이미지-실행하기&#34; class=&#34;headerlink&#34; title=&#34;2. 이미지 실행하기&#34;&gt;&lt;/a&gt;2. 이미지 실행하기&lt;/h3&gt;&lt;p&gt;이미지를 빌드해서 생성했으면, 이제 컨테이너화하여 서버를 운영할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Docker Desktop 가동&lt;/li&gt;
&lt;li&gt;좌측의 Images 에 지정했던 이미지명 찾기&lt;/li&gt;
&lt;li&gt;RUN 을 통해 가동 (세부설정은 Optional Settings를 통해 설정할 수 있다. 컨테이너명과 Port 등을 지정할 수 있다.)&lt;/li&gt;
&lt;li&gt;성공적으로 가동하면 왼측 Containers/Apps 의 컨테이너 목록란에 초록색 컨테이너 박스로 표기된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;+) 만약 Dockerfile 등의 결함이 있거나 하면 shell 실행이 중지되는데,&lt;br&gt;&lt;img src=&#34;/img/postimg/container_disable.png&#34; alt=&#34;containericon&#34;&gt;&lt;br&gt;요로코롬 컨테이너 아이콘이 회색으로 표기된다.&lt;br&gt;클릭을 통해 해당 로그란을 확인할 수 있다.&lt;br&gt;이 경우에는 파일 빌드 자체에 오류가 있는 경우이므로 이미지를 재빌드해야만 한다.&lt;/p&gt;
&lt;h3 id=&#34;3-컨테이너-실행-확인&#34;&gt;&lt;a href=&#34;#3-컨테이너-실행-확인&#34; class=&#34;headerlink&#34; title=&#34;3. 컨테이너 실행 확인&#34;&gt;&lt;/a&gt;3. 컨테이너 실행 확인&lt;/h3&gt;&lt;p&gt;도커 위에서 돌아가고 있는 이미지 컨테이너를 확인해 보자.&lt;br&gt;&lt;img src=&#34;/img/postimg/container_correct.png&#34; alt=&#34;containericon&#34;&gt;&lt;br&gt;정상적으로 돌아가고 있다면 컨테이너 박스가 녹색으로 표기된다.&lt;br&gt;필자는 웹서버이므로 웹 연결을 통해 컨테이너가 해당 로컬 포트를 통해 돌아가고 있는 것을 확인하였다.&lt;br&gt;이미지 가동 시 포트를 따로 뚫어 뒀다면 포트포워딩을 통해 포팅하고있는 컴퓨터의 외부 접속도 가능하다.&lt;/p&gt;
&lt;h3 id=&#34;4-컨테이너-중지&#34;&gt;&lt;a href=&#34;#4-컨테이너-중지&#34; class=&#34;headerlink&#34; title=&#34;4. 컨테이너 중지&#34;&gt;&lt;/a&gt;4. 컨테이너 중지&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/img/postimg/active_server_delete.png&#34; alt=&#34;containericon&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위 그림처럼 Docker Desktop의 Container/Apps 목록에서 컨테이너를 Delete 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;서버에 대한 이미지는 기존에 작성해 놓았기 때문에 컨테이너를 삭제해도 무방하다!&lt;br&gt;재가동시킬 땐 이미지를 다시 가동시키면 되니깐..&lt;/p&gt;
&lt;h3 id=&#34;5-그-외-명령어들&#34;&gt;&lt;a href=&#34;#5-그-외-명령어들&#34; class=&#34;headerlink&#34; title=&#34;5. 그 외 명령어들&#34;&gt;&lt;/a&gt;5. 그 외 명령어들&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;파일 접근하기 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+) 서버가 돌아갈때 로그 등을 생성하도록 해두었다면, 현재 돌아가고 있는 컨테이너의 내부 파일에 접근하는 것도 가능하다.&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker cp [컨테이너명]:[접근할 파일 경로] [저장할 경로명]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;컨테이너명 예시 : ex) MyConatiner&lt;br&gt;접근할 파일 경로 예시 : ex)/root/etc/logs&lt;br&gt;파일을 저장할 경로명 예시: ex) C:\Users\Desktop\Server_Container_Logs&lt;/p&gt;
&lt;p&gt;위 커맨드를 실행하면 서버 내부의 로그파일을 빼낼 수 있다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;컨테이너 내부 시간대 맞추기&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;+) 이미지 가동 시 옵셔널 세팅에 포함되지 않은 기능이다.. ㅡ.ㅡ 왜 이렇게 해놓았을까..?&lt;br&gt; 다소 곤란한 감이 있지만 이 경우도 명령어로 제어가 가능하다.&lt;br&gt; 컨테이너 가동 시에 시간대를 국제시간대로 맞춰주면 된다.&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;docker run --name [컨테이너명] -p [로컬로 접근할 포트명]:[컨테이너 내부로 뜷어놓을 포트명]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-e TZ&amp;#x3D;Asia&amp;#x2F;Seoul [이미지명]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 이런 식으로 가동하면 -e 커맨드를 통해 이미지 컨테이너의 시간대가 서울로 설정되어 가동된다.&lt;/p&gt;
</content>
        <category term="hexo" />
        <category term="docker" />
        <updated>2021-02-05T00:00:04.000Z</updated>
    </entry>
</feed>
