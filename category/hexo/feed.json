{
    "version": "https://jsonfeed.org/version/1",
    "title": "Coding Coconut • All posts by \"hexo\" category",
    "description": "주니어 웹 프론트엔드/백엔드 개발자. 공부하는 것도, 노는 것도 그만큼 좋아합니다. 덕질 없으면 어떻게 살아? ",
    "home_page_url": "https://coding-coconut.com",
    "items": [
        {
            "id": "https://coding-coconut.com/2022/08/25/Hexo-tag-%EC%98%81%EB%AC%B8%ED%83%9C%EA%B7%B8-%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90-%EC%88%98%EC%A0%95-%EC%8B%9C-%EB%B0%98%EC%98%81%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%98%A4%EB%A5%98/",
            "url": "https://coding-coconut.com/2022/08/25/Hexo-tag-%EC%98%81%EB%AC%B8%ED%83%9C%EA%B7%B8-%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90-%EC%88%98%EC%A0%95-%EC%8B%9C-%EB%B0%98%EC%98%81%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%98%A4%EB%A5%98/",
            "title": "Hexo tag 영문태그 대소문자 수정 시 반영되지 않는 오류",
            "date_published": "2022-08-25T03:35:55.000Z",
            "content_html": "<p>태그 영문 대소문자를 수정했을 때 링크 오류가 발생했다</p>\n<p>원인은 github에서 영문대소문자 수정 시 커밋사항에 반영되지 않기 때문이다.<br>태그를 아예 다른 문자로 수정하고 hexo deploy 로 재배포하면 된다.</p>\n<p>참조 링크<br><a href=\"https://github.com/hexojs/hexo/issues/2600\">https://github.com/hexojs/hexo/issues/2600</a></p>\n",
            "tags": [
                "hexo",
                "error"
            ]
        },
        {
            "id": "https://coding-coconut.com/2022/07/28/Hexo-%EB%B0%B0%ED%8F%AC-%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%99%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%EA%B4%80%ED%95%9C-%EC%9D%B4%EC%8A%88/",
            "url": "https://coding-coconut.com/2022/07/28/Hexo-%EB%B0%B0%ED%8F%AC-%EC%BB%A4%EB%A7%A8%EB%93%9C%EC%99%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%97%90-%EA%B4%80%ED%95%9C-%EC%9D%B4%EC%8A%88/",
            "title": "Hexo 배포 커맨드와 커스텀 도메인에 관한 이슈",
            "date_published": "2022-07-28T00:56:12.000Z",
            "content_html": "<h3 id=\"문제점\"><a href=\"#문제점\" class=\"headerlink\" title=\"문제점\"></a>문제점</h3><p> 기존 도메인에서 블로그 전용 도메인을 구매하고, 깃허브 페이지에 연결해 놓았었는데<br>Hexo로 만든 블로그 프로젝트에서 <code>hexo deploy</code> 커맨드를 이용해 배포하면<br>깃허브 페이지의 퍼블리싱된 커스텀 도메인이 초기화가 되는 이슈가 발생했다.</p>\n<h3 id=\"해결\"><a href=\"#해결\" class=\"headerlink\" title=\"해결\"></a>해결</h3><p>이를 해결하려면 hexo 의 블로그 프로젝트 source 폴더에<br>CNAME 파일을 생성하고, 안에 퍼블리싱할 커스텀 도메인을 입력한다.</p>\n<p><img src=\"/img/postimg/cname_file.png\" alt=\"cname_file\"></p>\n<p>이후 <code>hexo deploy</code> 커맨드를 입력하여 배포해도 깃허브 페이지의 커스텀 도메인이 해제되지 않는다.</p>\n",
            "tags": [
                "github_page",
                "hexo",
                "issue",
                "custom_domain",
                "배포",
                "hexo_deploy"
            ]
        },
        {
            "id": "https://coding-coconut.com/2022/06/10/Hexo-%ED%85%8C%EB%A7%88-%EB%A7%8C%EB%93%A4%EA%B8%B0/",
            "url": "https://coding-coconut.com/2022/06/10/Hexo-%ED%85%8C%EB%A7%88-%EB%A7%8C%EB%93%A4%EA%B8%B0/",
            "title": "Hexo 테마 만들기",
            "date_published": "2022-06-10T08:03:21.000Z",
            "content_html": "<h1 id=\"Hexo-테마-구축하기\"><a href=\"#Hexo-테마-구축하기\" class=\"headerlink\" title=\"Hexo 테마 구축하기\"></a>Hexo 테마 구축하기</h1><h4 id=\"들어가며\"><a href=\"#들어가며\" class=\"headerlink\" title=\"들어가며\"></a>들어가며</h4><p>Hexo 에서 기본적으로 제공하는 기본값 레이아웃 icarus의 소스가 많이 도움이 되었다.<br><br>Hexo 는 블로그 ‘프레임워크’ 이며, 공식 문서에서는 helper라는 이름으로 렌더링 스크립트도 제공한다. 용어가 생소해서 많이 헤맸던 기억이 난다.<br>헬퍼에서 제공하는 스크립트는 서버사이드 혹은 클라이언트 사이드 렌더링처럼 뷰 엔진 파일 위에서 사용할 수 있다. 해외에서 안내하는 방법대로 테마를 만들어보고, 정리해보고자 이렇게 게시물을 작성하게 되었다.<br></p>\n<h3 id=\"목차\"><a href=\"#목차\" class=\"headerlink\" title=\"목차\"></a>목차</h3><ul>\n<li>테마 폴더 만들기</li>\n<li>layout 파일 만들기</li>\n<li>기본 페이지 추가하기<ul>\n<li>index</li>\n<li>archive</li>\n</ul>\n</li>\n<li>부분 렌더링(페이지 쪼개기)</li>\n<li>정적 소스 불러오기</li>\n<li>만든 테마 적용하기</li>\n<li>테마가 적용된 블로그 배포하기</li>\n<li>테마 만들기 심화<ul>\n<li>부가 페이지 만들기</li>\n<li>댓글 위젯 달기(utterances)</li>\n<li>손수 위젯 만들기</li>\n<li>커스텀 404 페이지(github)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"테마-폴더-만들기\"><a href=\"#테마-폴더-만들기\" class=\"headerlink\" title=\"테마 폴더 만들기\"></a>테마 폴더 만들기</h2><p>Hexo init을 실행하고 나서, 프로젝트의 루트 경로 아래에 themes 폴더를 만든다.</p>\n<p>themes 폴더 하위에 테마 이름을 짓고 영문명으로 폴더를 생성한다. ex)your-theme-name</p>\n<p>your-theme-name 폴더 하위에도 _config.yml 파일을 만든다.</p>\n<blockquote>\n<p>Hexo는 _config.yml을 환경변수 겸용 클라이언트딴 전역변수처럼 사용할 수 있는데, <br><br>테마 하위에 있는 _config.yml은 이 테마에서만 특별하게 적용되는 환경변수값을 지정해서 사용한다.</p>\n</blockquote>\n<p>[your-theme-name]폴더 하위에 렌더링 형태를 결정할 layout 폴더와, 테마의 정적 리소스들이 들어갈 source 폴더를 만든다.</p>\n<h4 id=\"요약\"><a href=\"#요약\" class=\"headerlink\" title=\"요약\"></a>요약</h4><blockquote>\n<ol>\n<li>themes 폴더 &gt; [your-theme-name] 폴더 생성</li>\n<li>하위에 layout/source 폴더, _config.yml 만들기</li>\n</ol>\n</blockquote>\n<h2 id=\"layout-파일-만들기\"><a href=\"#layout-파일-만들기\" class=\"headerlink\" title=\"layout 파일 만들기\"></a>layout 파일 만들기</h2><p>폴더 구조를 잡았으면, [yout-theme-name]/layout 폴더 하위에 이제 페이지 골격을 이루는 파일을 만들어야 한다.<br>Hexo는 서버사이드 렌더링이나 클라이언트 사이드 렌더링을 할 때처럼 부분 렌더링을 지원한다.<br>이는 ejs나 pug 같은 뷰 엔진을 통해 이루어진다.</p>\n<p>특히 layout 파일은 테마의 전반적인 레이아웃을 결정한다.<br>메인 페이지, 블로그 페이지, 아카이브 페이지로 이동할 때, layout 파일 구조에 베이스를 잡고 하위에 페이지를 그린다.</p>\n<blockquote>\n<p>페이지별로 아예 다른 레이아웃을 적용하고 싶다면, 상위로 먼저 참조하는 layout을 이에 맞게 작성해야 한다.</p>\n</blockquote>\n<p>테마 폴더의 구조를 잡았으면 이제 렌더링할 뷰 엔진을 선택한다.<br>node.js를 하는 사람이라면 익숙한 뷰 엔진인 ejs 도 채택할 수 있다.<br>ejs를 사용한다면, 이에 맞는 layout 파일을 만든다.</p>\n<p><img src=\"/img/postimg/layout01.png\" alt=\"layout 파일 구조\"></p>\n<p>body 부분에 페이지가 이동될 때 페이지에 맞는 부분 레이아웃이 그려진다.</p>\n<h2 id=\"기본-페이지-추가하기\"><a href=\"#기본-페이지-추가하기\" class=\"headerlink\" title=\"기본 페이지 추가하기\"></a>기본 페이지 추가하기</h2><p>layout 파일을 작성했다면, 페이지의 레이아웃을 추가한다.</p>\n<h3 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h3><p>사이트에 진입했을 때, 가장 먼저 보여지는 페이지의 레이아웃은 index 페이지 레이아웃을 따른다.</p>\n<h3 id=\"archive\"><a href=\"#archive\" class=\"headerlink\" title=\"archive\"></a>archive</h3><p>아카이브 페이지는 주제별 카테고리 및 기간별 아카이브를 선택했을 때 그려지는 레이아웃이다.</p>\n<h2 id=\"부분-렌더링-페이지-쪼개기\"><a href=\"#부분-렌더링-페이지-쪼개기\" class=\"headerlink\" title=\"부분 렌더링(페이지 쪼개기)\"></a>부분 렌더링(페이지 쪼개기)</h2><p>Hexo는 앞서 말했듯이 뷰 엔진을 통한 부분 렌더링을 지원한다.<br>페이지 레이아웃에 통째로 작성해도 좋지만, 반복되는 구조 등이 있다면 partial 이라고 컴포넌트화 해서 위젯 붙이듯 붙여넣는 방법을 채택할 수도 있다.<br>이는 _partial 폴더 하위에 작성해서, partial 키워드로 렌더링 코드를 작성하면 된다.</p>\n<p><img src=\"/img/postimg/folder_structure.png\" alt=\"테마 폴더의 내부 구조\"></p>\n<p><img src=\"/img/postimg/layout01.png\" alt=\"작성한 partial 을 다음처럼 적용한다\"></p>\n<h2 id=\"정적-소스-불러오기\"><a href=\"#정적-소스-불러오기\" class=\"headerlink\" title=\"정적 소스 불러오기\"></a>정적 소스 불러오기</h2><p>source 폴더는 프로젝트의 루트에도 있고, 테마 내부에도 있다.</p>\n<p>테마 내부의 source 폴더는 블로그 포스팅에 사용되는 img 나 css, js 파일과 같은 정적 리소스를 두는 데에 사용한다.</p>\n<p><img src=\"/img/postimg/theme_source_folder.png\" alt=\"테마 내부의 source 폴더 안에는 정적 리소스가 들어간다\"></p>\n<h2 id=\"만든-테마-적용하기\"><a href=\"#만든-테마-적용하기\" class=\"headerlink\" title=\"만든 테마 적용하기\"></a>만든 테마 적용하기</h2><p>테마의 _config.yml이 아닌 프로젝트 루트 위치의 _config.yml에서 theme 명을<br>작성해 두었던 theme 명으로 변경한다.<br>변경사항을 저장하고 Hexo server를 가동하면 적용된 테마를 확인할 수 있다.</p>\n<h2 id=\"테마가-적용된-블로그-배포하기-github\"><a href=\"#테마가-적용된-블로그-배포하기-github\" class=\"headerlink\" title=\"테마가 적용된 블로그 배포하기(github)\"></a>테마가 적용된 블로그 배포하기(github)</h2><p>Hexo에는 배포 자동화 플러그인이 있다.<br>github에 배포하려면 hexo-deploy-git 플러그인을 사용하자.<br>프로젝트 루트의 _config.yml에서 deploy관련 설정을 작성해준다.<br><img src=\"/img/postimg/github_deploy_yml.png\" alt=\"깃허브 배포 yml 설정\"></p>\n<h2 id=\"테마-만들기-심화\"><a href=\"#테마-만들기-심화\" class=\"headerlink\" title=\"테마 만들기 심화\"></a>테마 만들기 심화</h2><h3 id=\"부가-페이지-만들기\"><a href=\"#부가-페이지-만들기\" class=\"headerlink\" title=\"부가 페이지 만들기\"></a>부가 페이지 만들기</h3><p>hexo new page [페이지명] 커맨드를 하면 프로젝트 루트의 source 폴더 내부에 [페이지명]으로 된 폴더가 생기는데, 페이지 주소를 받기 위해 index.md 가 내장되어 있다.</p>\n<p>프로파일처럼 아무 내용이 없더라도, 페이지는 만들어지며 .md 의 yml 부분에서 레이아웃을 설정해주지 않으면, 테마의 index.ejs의 레이아웃으로 적용된다.</p>\n<p>theme에서 부가적으로 만들 페이지의 레이아웃을 설정해준다.</p>\n<p>예시로 guest 나 prologue 등 부가적인 ejs를 생성한다.</p>\n<p>해당 테마는 guest나 prologue라는 이름의 레이아웃이 생기게 되며,<br>프로젝트 루트 폴더/source 내부의 페이지 이름으로 된 폴더 내부의 index.md의 layout 값을<br>해당 페이지의 layout 이름으로 지정해준다.</p>\n<p>서버를 가동하면 페이지에 레이아웃이 적용된 걸 확인할 수 있다.</p>\n<h3 id=\"댓글-위젯-달기-utterances\"><a href=\"#댓글-위젯-달기-utterances\" class=\"headerlink\" title=\"댓글 위젯 달기(utterances)\"></a>댓글 위젯 달기(utterances)</h3><p>포스트 페이지 아래에 utterances 플러그인을 삽입한다.</p>\n<p>git 이슈와 연동하는 권한을 utterances에게 부여해야 한다.</p>\n<p>Hexo 게시물의 퍼머링크와 해당 플러그인을 바인딩하면 각 포스트에 댓글을 달 때마다<br>포스트별로 이슈가 생성되고, 알람을 받아볼 수 있다.</p>\n<h3 id=\"손수-위젯-만들기\"><a href=\"#손수-위젯-만들기\" class=\"headerlink\" title=\"손수 위젯 만들기\"></a>손수 위젯 만들기</h3><p>partial 키워드가 부분 렌더링하는 걸 이용하여 위젯을 만들 수 있다.</p>\n<ul>\n<li>최근 포스트</li>\n<li>포스트의 내용 트래커</li>\n<li>카테고리 메뉴</li>\n<li>태그 클라우드 메뉴 등</li>\n</ul>\n<h3 id=\"커스텀-404-페이지-github\"><a href=\"#커스텀-404-페이지-github\" class=\"headerlink\" title=\"커스텀 404 페이지(github)\"></a>커스텀 404 페이지(github)</h3><p>배포를 깃허브에 하는 경우 source 폴더 바로 아래에 404.html 을 만들어 넣어두면<br>github에서 링크를 찾지 못할 때마다 404.html 로 리디렉션시킨다.</p>\n<p>잘 꾸며서 넣어두면 따로 라우팅을 설정할 필요가 없어 편리하다.</p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://coding-coconut.com/2021/03/08/Hexo%EC%99%80-API%EC%84%9C%EB%B2%84-%EA%B0%84%EC%9D%98-%ED%86%B5%EC%8B%A0/",
            "url": "https://coding-coconut.com/2021/03/08/Hexo%EC%99%80-API%EC%84%9C%EB%B2%84-%EA%B0%84%EC%9D%98-%ED%86%B5%EC%8B%A0/",
            "title": "Hexo와 API 서버 간의 통신",
            "date_published": "2021-03-08T07:46:45.000Z",
            "content_html": "<p>Hexo 블로그에 서버 API를 이용하는 덧글 위젯을 직접 만들고 싶다면 참조할 수 있는 포스팅이다.<br>Hexo는 정적 웹 블로그를 빠르게 작성할 수 있도록 하는 데에 주요 목적이 있기 때문에, 쿼리를 통해 데이터를 가져오고 서버통신을 통해 html dom을 렌더링하는 로직에 대한 지원은 그다지 좋지 않다.<br> Hexo 공식 사이트에서 지원하는 플러그인, 또는 Disqus나 Utterances 와 같은 덧글 위젯이 있지만.. 이런 위젯은 커스터마이징이나 데이터 저장 방식이 유연하지 못하다는 게 사실이다.</p>\n<p>요약해서 말하자면, 결국 개발자들의 입맞에 맞지 않기 때문에 커스텀 위젯을 만들고자 하는 것이다 ^^;;</p>\n<blockquote>\n<p>뭘 만들 것인가?</p>\n</blockquote>\n<p>Hexo처럼 정적 프레임워크와 같이 사용할 수 있는, 덧글 위젯을 만들려고 한다.</p>\n<blockquote>\n<p>어떻게 만들 것인가?</p>\n</blockquote>\n<p>Hexo와 호환되려면 어떻게 해야 할까?<br>Hexo는 정적 블로그형 웹페이지 제작에 최적화된 별도의 서버를 가지고 있다. 이 서버는 Hexo를 가동시킬 때 .md(마크다운) 파일을 html로 내려준다.</p>\n<p>*문제점 : Hexo와 위젯 API서버가 다르기 때문에 크로스오리진 이슈가 발생한다.</p>\n<p>:할 수 있는 방법</p>\n<blockquote>\n<p>위젯 따로 구동되는 방식을 이용해야 한다. 다른 웹페이지를 볼 수 있는 iframe 태그를 이용할수도 있고, 데이터만 전송받아 Hexo 상에서 DOM을 따로 그릴 수도 있다. 데이터 교환 방식은 ajax 또는 axios를 이용할 것이다.</p>\n</blockquote>\n<p>흐름 구상은 다음과 같다.</p>\n<ol>\n<li>Hexo에서 ajax 혹은 axios를 이용하여 데이터를 요청한다.</li>\n<li>api를 통해 댓글 데이터를 전송한다.</li>\n<li>전송된 데이터를 받아서 Hexo상에서 HTML DOM을 직접 그린다.</li>\n</ol>\n<p>..해서 다음과 같은 과정이 될 것이다.</p>\n<ul>\n<li>Hexo ajax 요청 =&gt; 위젯 API의 수신 및 응답 =&gt; Hexo ajax 응답 완료 =&gt; Hexo의 js로 DOM 렌더링</li>\n</ul>\n<blockquote>\n<p>그렇다면 이제 뭘 이용해서 구현할까?</p>\n</blockquote>\n<p>페이지를 렌더링해서 iframe하는 방식도 해봤고 데이터만 받아와서 hexo상에서 렌더링하는 방식도 해봤는데<br>iframe은 크로스오리진 이슈 때문에 iframe 내부의 DOM을 조작하기가 까다로워서 ajax 요청을 통해 api 서버로부터 데이터를 받아와서<br>Hexo 측에서 댓글 위젯을 그리는 편을 택했다.</p>\n<h3 id=\"1-Node-js-Express-프레임워크로-위젯이-가동될-서버-만들기\"><a href=\"#1-Node-js-Express-프레임워크로-위젯이-가동될-서버-만들기\" class=\"headerlink\" title=\"1. Node.js Express 프레임워크로 위젯이 가동될 서버 만들기\"></a>1. Node.js Express 프레임워크로 위젯이 가동될 서버 만들기</h3><!-- 이미지 -->\n<p>express를 사용하여 api 서버의 틀을 잡는다.</p>\n<!-- 이미지 -->\n<p>댓글이 저장될 데이터베이스 또한 작성해야 한다.</p>\n<h3 id=\"2-위젯-서버의-API-로직-작성하기\"><a href=\"#2-위젯-서버의-API-로직-작성하기\" class=\"headerlink\" title=\"2. 위젯 서버의 API 로직 작성하기\"></a>2. 위젯 서버의 API 로직 작성하기</h3><!-- 이미지 -->\n<p>Node Express 서버에 기본 CRUD를 할 수 있도록 기능을 만든다.</p>\n<h3 id=\"3-Hexo-ajax-요청-로직-작성\"><a href=\"#3-Hexo-ajax-요청-로직-작성\" class=\"headerlink\" title=\"3. Hexo ajax 요청 로직 작성\"></a>3. Hexo ajax 요청 로직 작성</h3><!-- 이미지 -->\n<p>Hexo 댓글 위젯의 버튼을 누르면 ajax 또는 axios 를 통해 위에서 작성한 api에 데이터를 요청할 수 있도록 한다.</p>\n<h3 id=\"4-댓글-DOM-렌더링-로직-작성\"><a href=\"#4-댓글-DOM-렌더링-로직-작성\" class=\"headerlink\" title=\"4. 댓글 DOM 렌더링 로직 작성\"></a>4. 댓글 DOM 렌더링 로직 작성</h3><!-- 이미지 -->\n<p>데이터 전송이 끝나면 추가되는 댓글 또는 삭제되는 댓글을 렌더링할 수 있도록 html DOM 렌더러를 작성한다.</p>\n<h3 id=\"5-댓글이-갱신되는것을-확인\"><a href=\"#5-댓글이-갱신되는것을-확인\" class=\"headerlink\" title=\"5. 댓글이 갱신되는것을 확인\"></a>5. 댓글이 갱신되는것을 확인</h3><!-- 이미지 -->\n<p>댓글이 잘 작성된 것을 확인할 수 있었다.<br>지금은 익명 댓글이지만, 로그인 위젯을 만들어 놓으면 api 서버로부터 세션검증을 통해 유저검증을 하는 것도 가능할 것 같다.</p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://coding-coconut.com/2021/02/09/Hexo-%ED%85%8C%EB%A7%88-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%81%EC%9A%A9%EA%B8%B0/",
            "url": "https://coding-coconut.com/2021/02/09/Hexo-%ED%85%8C%EB%A7%88-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%81%EC%9A%A9%EA%B8%B0/",
            "title": "Hexo 테마 블로그 적용기",
            "date_published": "2021-02-09T03:19:02.000Z",
            "content_html": "<p>블로그의 첫 게시물은 도커가 장식했지만, 그래도 명색이 헥소로 기껏 만든 블로그인데 적용기를 써보자~<br>다른 블로그를 봐도 헥소 테마 레이아웃을 만드는 방법은 잘 나와있지 않아서, 이왕 하는 김에 테마 만드는 법도 같이 기술하련다.<br>헥소 프레임워크를 좀 만져봤는데, 작동원리는 쪼끔 알겠고 헥소 기반 테마 만드는법을 모르는 사람에게 추천한다. 헥소 공식 사이트에도 만드는 방법이 어렴풋하게나마 나와있으니 참조해도 좋다(그리 자세히 나와있진 않지만..)</p>\n<h3 id=\"1-레이아웃-폴더-만들기\"><a href=\"#1-레이아웃-폴더-만들기\" class=\"headerlink\" title=\"1. 레이아웃 폴더 만들기\"></a>1. 레이아웃 폴더 만들기</h3><p>우선… 블로그 폴더 구조는 다음과 같다.</p>\n<p><img src=\"/img/postimg/blog_structure.png\" alt=\"blog_structure\"></p>\n<p>먼저  프로젝트 루트 폴더에 themes 폴더를 만들고, 내부에 자기가 만들 테마의 이름을 짓자.<br>이 안에 블로그 틀이 들어갈 📁layout 폴더와 img/js/font처럼 정적 소스들이 들어갈 📁source 폴더를 만든다.<br>블로그 테마에 적용시킬 변수들을 모아 관리하는 <code>_config.yml</code>파일도 만든다.</p>\n<h3 id=\"3-렌더링할-템플릿-엔진-선택\"><a href=\"#3-렌더링할-템플릿-엔진-선택\" class=\"headerlink\" title=\"3. 렌더링할 템플릿 엔진 선택\"></a>3. 렌더링할 템플릿 엔진 선택</h3><p>필자는 Express를 사용해와서.. 상대적으로 익숙한 ejs로 작성할 것이다.<br>블로그의 전체 레이아웃을 담당하는 <code>layout.ejs</code> 파일을 📁layout 폴더 안에 만들어준다.<br>이 <code>layout.ejs</code> 파일이 블로그의 뼈대 역할을 해줄 것이다.</p>\n<h3 id=\"4-부분-렌더링-파츠별로-작성\"><a href=\"#4-부분-렌더링-파츠별로-작성\" class=\"headerlink\" title=\"4. 부분 렌더링 파츠별로 작성\"></a>4. 부분 렌더링 파츠별로 작성</h3><p>📁layout 폴더 안에 각 부분별 파츠가 들어갈📁_partial 폴더를 만들어주고, <code>layout.ejs</code> 파일을 한번 보자.</p>\n<h3 id=\"5-레이아웃-변수를-담당할-config-yml-파일-작성\"><a href=\"#5-레이아웃-변수를-담당할-config-yml-파일-작성\" class=\"headerlink\" title=\"5. 레이아웃 변수를 담당할 _config.yml 파일 작성\"></a>5. 레이아웃 변수를 담당할 _config.yml 파일 작성</h3><p>ejs 문법 속에 동적으로 들어갈 변수들을 yml 로 작성한다.</p>\n<h3 id=\"6-부가적인-것\"><a href=\"#6-부가적인-것\" class=\"headerlink\" title=\"6. 부가적인 것\"></a>6. 부가적인 것</h3><blockquote>\n<p>서버 통신이 필요한 무언가를 만들고 싶다.. 가령 댓글이라거나..</p>\n</blockquote>\n<p>Hexo가 직접 댓글서비스를 지원하진 않지만, 관련 플러그인을 지원한다.<br>댓글을 붙이고 싶다면, 상세한 커스터마이징 없이 <a href=\"https://utteranc.es/\">Utterances</a>나 <a href=\"https://help.disqus.com/en/\">Disqus</a>처럼 댓글 위젯을 서비스받는 방법도 있다. Hexo 에서 직접 추천하는 방법이며, 공식 메뉴얼도 있다!</p>\n<p>직접 만들고 싶다면, 아쉽게도 Hexo는 정적 서비스를 중점적으로 빠르게 작성하기 위한 프레임워크이기 때문에, 서버통신이 필요한 무언가를 작성할 때 그렇게 용이하지는 않다. 이렇게 되면.. 정적 소스 폴더 안의 js로 직접 서버 API로 ajax를 날리는 방법을 택해야💦..</p>\n<p>이럴 바에야 차라리 서버사이드 렌더링(SSR) 방식으로 만드는 게 더 낫지 않은가 고민해보길 바란다. </p>\n<p>그래도 Hexo 블로그에 서버 API를 이용하는 덧글 위젯을 직접 만들고 싶다면… <a href=\"#\">[링크]:Hexo 와 API 서버 간의 통신</a></p>\n<blockquote>\n<p>iframe 으로 위젯 만들기?</p>\n</blockquote>\n<p>iframe 내부에 들어갈 위젯이 고정 높이폭과 너비를 가진다면 가능하다!<br>혹은 position: absolute; 로 동동 떠 있으면 iframe으로 위젯을 만들어도 좋다.</p>\n",
            "tags": [
                "hexo"
            ]
        }
    ]
}