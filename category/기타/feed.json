{
    "version": "https://jsonfeed.org/version/1",
    "title": "Coding Coconut • All posts by \"기타\" category",
    "description": "주니어 웹 프론트엔드/백엔드 개발자. 공부하는 것도, 노는 것도 그만큼 좋아합니다. 덕질 없으면 어떻게 살아? ",
    "home_page_url": "https://coding-coconut.com",
    "items": [
        {
            "id": "https://coding-coconut.com/2022/08/24/Linux-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-https-%EC%9D%B8%EC%A6%9D%EA%B3%BC-Apache2-%ED%94%84%EB%A1%9D%EC%8B%9C%ED%8C%A8%EC%8A%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/",
            "url": "https://coding-coconut.com/2022/08/24/Linux-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-https-%EC%9D%B8%EC%A6%9D%EA%B3%BC-Apache2-%ED%94%84%EB%A1%9D%EC%8B%9C%ED%8C%A8%EC%8A%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/",
            "title": "Linux 서버에서 https 인증과 Apache2 프록시패스 설정하기",
            "date_published": "2022-08-24T09:14:09.000Z",
            "content_html": "<h3 id=\"들어가며\"><a href=\"#들어가며\" class=\"headerlink\" title=\"들어가며\"></a>들어가며</h3><p>인증서 발급방법은 기존에 알고있어서 문제가 되지 않았는데 아파치 설정파일 만지는 법을 까먹어서 한동안 설정파일과 씨름했다.. -.-;;<br>로그인한 유저가 관리자 권한일 경우 굳이 sudo를 입력하지 않아도 된다!</p>\n<h3 id=\"0-apache2-를-깔려면-apt를-사용해야-하므로-업데이트가-필요\"><a href=\"#0-apache2-를-깔려면-apt를-사용해야-하므로-업데이트가-필요\" class=\"headerlink\" title=\"0. apache2 를 깔려면 apt를 사용해야 하므로 업데이트가 필요\"></a>0. apache2 를 깔려면 apt를 사용해야 하므로 업데이트가 필요</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-linux-전용-apache2-설치\"><a href=\"#1-linux-전용-apache2-설치\" class=\"headerlink\" title=\"1. linux 전용 apache2 설치\"></a>1. linux 전용 apache2 설치</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-000-default-conf-편집\"><a href=\"#2-000-default-conf-편집\" class=\"headerlink\" title=\"2. 000-default.conf 편집\"></a>2. 000-default.conf 편집</h3><p>위치는 리눅스 우분투 서버18 기준 맨~ 위 디렉토리 /etc/apache2/site-available/000-default.conf 이다<br>vi 로 편집하거나 (apache2 를 처음 설치하게 되면 기본으로 파일설정 권한이 읽기전용이다 -.-;;;)</p>\n<blockquote>\n<p>파일 권한 수정(읽기 쓰기 실행 다 허용)</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 000-default.conf[혹은 디렉토리]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>000-default.conf 를 아래처럼 편집한 후 저장<br>vi 명령어를 사용해서 즉석으로 편집해도 되고 파일질라같은 ftp 응용프로그램을 이용해서 로컬에서 작성하고 덮어쓰기해도 좋다.<br>vi 명령어일 경우 저장하고 나가기는 esc + :wq!이다</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule 구문을 써 줘야 ProxyPass가 작동한다. 이거 미리 설정하면 아래 파일을 실행시키는 스크립트 작성할 필요 x</span></span><br><span class=\"line\">LoadModule proxy_module modules/mod_proxy.so</span><br><span class=\"line\">LoadModule proxy_http_module modules/mod_proxy_http.so</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerAdmin webmaster@localhost</span><br><span class=\"line\">\tDocumentRoot /var/www/html</span><br><span class=\"line\"></span><br><span class=\"line\">\tServerName yourdomain.com</span><br><span class=\"line\">\tServerAlias yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\">\tProxyRequests Off</span><br><span class=\"line\">\tProxyPreserveHost On</span><br><span class=\"line\">    <span class=\"comment\"># 80으로 받으면 아래 주소로 넘긴다. 여기서의 로컬호스트는 apache가 돌아가는 컴퓨터의 로컬호스트.</span></span><br><span class=\"line\">\t<span class=\"comment\">#주소창에서 보여지는 주소도 서버네임으로 바뀌어서 보여진다.</span></span><br><span class=\"line\">  \tProxyPass / http://localhost:8080/</span><br><span class=\"line\">  \tProxyPassReverse / http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\">\tErrorLog <span class=\"variable\">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class=\"line\">\tCustomLog <span class=\"variable\">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class=\"line\"></span><br><span class=\"line\">    RewriteEngine on</span><br><span class=\"line\">    RewriteCond %&#123;SERVER_NAME&#125; =content-ad-dev.fastview.co.kr</span><br><span class=\"line\">    RewriteRule ^ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R=permanent]</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Apache2-서비스-재가동\"><a href=\"#3-Apache2-서비스-재가동\" class=\"headerlink\" title=\"3. Apache2 서비스 재가동\"></a>3. Apache2 서비스 재가동</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Snap-설치-이미-깔려-있으면-생략\"><a href=\"#4-Snap-설치-이미-깔려-있으면-생략\" class=\"headerlink\" title=\"4. Snap 설치(이미 깔려 있으면 생략)\"></a>4. Snap 설치(이미 깔려 있으면 생략)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install core; sudo snap refresh core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Snap으로-Certbot-설치\"><a href=\"#5-Snap으로-Certbot-설치\" class=\"headerlink\" title=\"5. Snap으로 Certbot 설치\"></a>5. Snap으로 Certbot 설치</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install --classic certbot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-Apache-사양으로-인증서-발급-apache2-서비스가-가동-중이고-80포트가-뜷려있어야-함\"><a href=\"#6-Apache-사양으로-인증서-발급-apache2-서비스가-가동-중이고-80포트가-뜷려있어야-함\" class=\"headerlink\" title=\"6. Apache 사양으로 인증서 발급(apache2 서비스가 가동 중이고 80포트가 뜷려있어야 함)\"></a>6. Apache 사양으로 인증서 발급(apache2 서비스가 가동 중이고 80포트가 뜷려있어야 함)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --apache</span><br></pre></td></tr></table></figure>\n<p>머라머라 나오는데 읽어보면 도메인 입력해달라는것과 인증서 만료 시 발송할 이메일좀 설정해달라는 내용<br>그리고.. 뭔가를 보낸다는 내용인데 이 항목은 생략해도 됨</p>\n<p>만약 과정이 꼬여서 000-default.conf를 다시 수정해야 하면, 인증서파일 재설정을 하면 된다.</p>\n<p>인증서가 이미 존재할 때 위 명령어를 입력하면 인증서 목록이 뜨는데 원하는 도메인의 번호를 입력한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: Attempt to reinstall this existing certificate</span><br></pre></td></tr></table></figure>\n\n<p>해당 항목을 선택하면 Certbot의 인증서 파일(000-default-le-ssl.conf)이 다시 갱신된다.</p>\n<h3 id=\"7-확인\"><a href=\"#7-확인\" class=\"headerlink\" title=\"7. 확인\"></a>7. 확인</h3><p>웹페이지에 접속해서 자물쇠 표시가 뜨면 성공!</p>\n",
            "tags": [
                "certbot",
                "배포",
                "https",
                "인증서",
                "apache"
            ]
        },
        {
            "id": "https://coding-coconut.com/2022/07/21/Github-Page%EC%97%90-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/",
            "url": "https://coding-coconut.com/2022/07/21/Github-Page%EC%97%90-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/",
            "title": "Github Page에 커스텀 도메인 연결하기",
            "date_published": "2022-07-21T08:20:52.000Z",
            "content_html": "<h1 id=\"Github-Page에-커스텀-도메인-연결하기\"><a href=\"#Github-Page에-커스텀-도메인-연결하기\" class=\"headerlink\" title=\"Github Page에 커스텀 도메인 연결하기\"></a>Github Page에 커스텀 도메인 연결하기</h1><p>방법은 다음과 같다.</p>\n<h3 id=\"도메인을-구입한-사이트에서-깃허브-리포지토리-주소를-CNAME으로-추가-또는-변경해주기\"><a href=\"#도메인을-구입한-사이트에서-깃허브-리포지토리-주소를-CNAME으로-추가-또는-변경해주기\" class=\"headerlink\" title=\"도메인을 구입한 사이트에서 깃허브 리포지토리 주소를 CNAME으로 추가 또는 변경해주기\"></a>도메인을 구입한 사이트에서 깃허브 리포지토리 주소를 CNAME으로 추가 또는 변경해주기</h3><p>도메인을 구입한 사이트에서 있어야 할 레코드는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th>레코드명</th>\n<th>이름</th>\n<th>데이터</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CNAME</td>\n<td>www</td>\n<td>[yourRepo].github.io</td>\n</tr>\n<tr>\n<td>A</td>\n<td>@</td>\n<td>185.199.108.153</td>\n</tr>\n<tr>\n<td>A</td>\n<td>@</td>\n<td>185.199.109.153</td>\n</tr>\n<tr>\n<td>A</td>\n<td>@</td>\n<td>185.199.110.153</td>\n</tr>\n<tr>\n<td>A</td>\n<td>@</td>\n<td>185.199.111.153</td>\n</tr>\n</tbody></table>\n<p>네임서버는 따로 이관하지 않아도 된다.</p>\n<h3 id=\"블로그로-서비스되고있는-깃허브-페이지의-리포지토리-gt-Setting-gt-Page\"><a href=\"#블로그로-서비스되고있는-깃허브-페이지의-리포지토리-gt-Setting-gt-Page\" class=\"headerlink\" title=\"블로그로 서비스되고있는 깃허브 페이지의 리포지토리 =&gt; Setting =&gt; Page\"></a>블로그로 서비스되고있는 깃허브 페이지의 리포지토리 =&gt; Setting =&gt; Page</h3><p><img src=\"/img/postimg/custom_domain.png\" alt=\"커스텀 도메인\"></p>\n<p>save를 누르면 위에 등록한 DNS정보가 모두 올바를 경우 해당 주소로 퍼블리시되었다는 알람을 띄운다.</p>\n<p>아래 체크박스를 보면 알 수 있지만 GithubPage 특성상 https 옵션을 활성화할 수 있다.</p>\n<p>도메인으로 접속했을 때 깃허브 페이지가 뜨면 성공!</p>\n",
            "tags": [
                "github_page",
                "dns",
                "domain"
            ]
        },
        {
            "id": "https://coding-coconut.com/2022/01/21/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%88%EB%8B%A8%EC%9E%A5/",
            "url": "https://coding-coconut.com/2022/01/21/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%88%EB%8B%A8%EC%9E%A5/",
            "title": "블로그 새단장",
            "date_published": "2022-01-21T07:40:37.000Z",
            "content_html": "<p>기존 블로그 레이아웃과 테마를 새로 리뉴얼했다!<br>깔끔해서 마음에 든다.</p>\n<p>이번에 새 테마를 만들면서, 기존 Hexo 공식 문서를 많이 파악해 보는 시간을 가졌다.<br>조만간 레이아웃 만들기도 정리해서 포스팅할 예정.</p>\n",
            "tags": [
                "잡담"
            ]
        },
        {
            "id": "https://coding-coconut.com/2021/09/17/%EB%A7%81%ED%81%AC-%EC%8A%A4%ED%81%AC%EB%9E%A9-%EB%B0%8F-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C/",
            "url": "https://coding-coconut.com/2021/09/17/%EB%A7%81%ED%81%AC-%EC%8A%A4%ED%81%AC%EB%9E%A9-%EB%B0%8F-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C/",
            "title": "링크 스크랩 및 참고자료",
            "date_published": "2021-09-17T00:30:08.000Z",
            "content_html": "<h3 id=\"리눅스-명령어들\"><a href=\"#리눅스-명령어들\" class=\"headerlink\" title=\"리눅스 명령어들\"></a>리눅스 명령어들</h3><p><code>sudo grep -ir &#39;bind-address&#39; /etc/mysql/</code><br>해당 위치에 원하는 텍스트가 있는 파일을 찾는 명령어</p>\n<p><code>iptables -I INPUT -s 1.1.1.1 -j DROP</code><br>특정 IP막기</p>\n<blockquote>\n<p><a href=\"https://thisblogbusy.tistory.com/entry/iptables-%ED%8A%B9%EC%A0%95-IP-%EB%A7%89%EA%B8%B0?category=692140\">https://thisblogbusy.tistory.com/entry/iptables-특정-IP-막기?category=692140</a> </p>\n</blockquote>\n<p><code>cat /var/log/apache2/access.log</code></p>\n<p><code>tail access.log</code><br>접속 기록 확인</p>\n<p><code>nohup npm start &amp;</code><br>노헙으로 종료가되어도 계속 실행되도록 백그라운드로 npm start실행.</p>\n<h3 id=\"https-인증\"><a href=\"#https-인증\" class=\"headerlink\" title=\"https 인증\"></a>https 인증</h3><p>호스트 서버컴퓨터에 snap 깔고 certbot 깔고</p>\n<p><code>certbot --apache</code></p>\n<p>리버스프록시로 아파치를 설정해뒀다면 아파치 사양으로 certbot이 자동으로 인증서를 설정해줌.</p>\n<h3 id=\"ip-접속기록-확인-아파치-이용\"><a href=\"#ip-접속기록-확인-아파치-이용\" class=\"headerlink\" title=\"ip 접속기록 확인 (아파치 이용)\"></a>ip 접속기록 확인 (아파치 이용)</h3><p><code>sudo awk &#39;&#123; print $1&#125;&#39; /var/log/apache2/access.log | sort | uniq -c | sort -nr | head -n 10</code><br>접속기록 빈도 10위까지 출력</p>\n<h3 id=\"ssh-키페어-등록하기\"><a href=\"#ssh-키페어-등록하기\" class=\"headerlink\" title=\"ssh 키페어 등록하기\"></a>ssh 키페어 등록하기</h3><blockquote>\n<p><a href=\"https://extrememanual.net/26803\">https://extrememanual.net/26803</a></p>\n</blockquote>\n<ol>\n<li><p>puttygen 이용, rsa 키페어 생성</p>\n</li>\n<li><p>퍼블릭키와 프라이빗키 저장</p>\n</li>\n<li><p>호스트 서버 들어가서 유저계정 고유 폴더에 .ssh 폴더 만들기</p>\n</li>\n</ol>\n<p><code>mkdir .ssh</code></p>\n<p><code>vi .ssh/authorized_keys</code></p>\n<ol start=\"4\">\n<li>해당 편집기에 public key 부분을 텍스트 붙여넣기 후 저장</li>\n</ol>\n<h3 id=\"드래그앤드롭-라이브러리\"><a href=\"#드래그앤드롭-라이브러리\" class=\"headerlink\" title=\"드래그앤드롭 라이브러리\"></a>드래그앤드롭 라이브러리</h3><blockquote>\n<p><a href=\"https://interactjs.io/\">https://interactjs.io/</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://web.dev/drag-and-drop/\">https://web.dev/drag-and-drop/</a></p>\n</blockquote>\n<p>드래그앤드롭 파일 업로드 및 설명 튜토리얼.</p>\n<h3 id=\"Electron-시작하기\"><a href=\"#Electron-시작하기\" class=\"headerlink\" title=\"Electron 시작하기\"></a>Electron 시작하기</h3><blockquote>\n<p><a href=\"https://musma.github.io/2019/07/17/electron-getting-started.html\">https://musma.github.io/2019/07/17/electron-getting-started.html</a></p>\n</blockquote>\n<p>Electron을 이용해서 node.js 와 js로 데스크톱 어플리케이션을 만들 수 있다.</p>\n",
            "tags": [
                "스크랩"
            ]
        }
    ]
}