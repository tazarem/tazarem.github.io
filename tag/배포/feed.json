{
    "version": "https://jsonfeed.org/version/1",
    "title": "Coding Coconut • All posts by \"배포\" tag",
    "description": "주니어 웹 프론트엔드/백엔드 개발자. \\n  공부하는 것도, 노는 것도 그만큼 좋아합니다. \\n 현 직장에서는 AWS Lambda 와 Typscript 를 접목한 서드파티 모듈 개발을 하고 있습니다.",
    "home_page_url": "https://coding-coconut.com",
    "items": [
        {
            "id": "https://coding-coconut.com/post/clv4m958p003k6m5ohyl772jj/",
            "url": "https://coding-coconut.com/post/clv4m958p003k6m5ohyl772jj/",
            "title": "ubuntu 22버전에서 podman 설치하기",
            "date_published": "2024-04-18T02:14:09.000Z",
            "content_html": "<h3 id=\"설치\"><a href=\"#설치\" class=\"headerlink\" title=\"설치\"></a>설치</h3><p>20.04LTS와는 다르게 번거로운 절차가 필요하지 않다.<br>걍 바로 설치</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt -y install podman</span><br><span class=\"line\"><span class=\"comment\"># &gt; 포드맨 설치됨</span></span><br><span class=\"line\">podman ps</span><br><span class=\"line\"><span class=\"comment\"># &gt; 포드맨 컨테이너 목록 출력</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"그-외-이슈\"><a href=\"#그-외-이슈\" class=\"headerlink\" title=\"그 외 이슈\"></a>그 외 이슈</h3><p>20.04LTS에 설치하는 방식으로 하면 문제가 없지만,</p>\n<p>우분투 22.04.4 LTS 의 경우에는 도커에서 리포지토리를 땡겨오지 못하는 이슈가 있다.</p>\n<p>포드맨 정책으로 아무 리포지토리나 땡겨오지 못하도록 제어한 것인데</p>\n<p>자동으로 도커쪽으로 땡겨오도록 설정하려면 다음 파일을 vi로 편집하여 저장한다.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unqualified-search-registries = [<span class=\"string\">&quot;docker.io&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code> unqualified-search-registries</code> </p>\n<p>이 부분의 주석을 켜고 괄호 안을 도커 주소로 변경한다</p>\n<p>저장하고 나서 이미지를 생성하면 Dockerfile 내부의 FROM 부분을 자동으로 땡겨온다.</p>\n",
            "tags": [
                "podman",
                "ubuntu",
                "배포"
            ]
        },
        {
            "id": "https://coding-coconut.com/post/clv4m958o003f6m5o4ifu9yvp/",
            "url": "https://coding-coconut.com/post/clv4m958o003f6m5o4ifu9yvp/",
            "title": "Ubuntu 20.10 이하 버전에서 podman 설치하기",
            "date_published": "2023-04-26T08:25:10.000Z",
            "content_html": "<h1 id=\"ubuntu-20-10-이하-버전에서-podman-설치하기\"><a href=\"#ubuntu-20-10-이하-버전에서-podman-설치하기\" class=\"headerlink\" title=\"ubuntu 20.10 이하 버전에서 podman 설치하기\"></a>ubuntu 20.10 이하 버전에서 podman 설치하기</h1><p>배포기준 AWS EC2 <code>Ubuntu 20.04 LTS</code> 에 설치하였다.</p>\n<h3 id=\"1-쿠빅-리포지토리-추가\"><a href=\"#1-쿠빅-리포지토리-추가\" class=\"headerlink\" title=\"1. 쿠빅 리포지토리 추가\"></a>1. 쿠빅 리포지토리 추가</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo sh -c <span class=\"string\">&quot;echo &#x27;deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /&#x27; &gt; /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>입력하고 커맨드해도 아무것도 출력되지 않는데 정상적으로 추가된 것이다.</p>\n</blockquote>\n<h3 id=\"2-리포지토리-키-추가\"><a href=\"#2-리포지토리-키-추가\" class=\"headerlink\" title=\"2. 리포지토리 키 추가\"></a>2. 리포지토리 키 추가</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_20.04/Release.key -O- | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>OK 가 뜨면 성공</p>\n</blockquote>\n<h3 id=\"3-쿠빅-리포-추가-후-apt-업데이트\"><a href=\"#3-쿠빅-리포-추가-후-apt-업데이트\" class=\"headerlink\" title=\"3. 쿠빅 리포 추가 후 apt 업데이트\"></a>3. 쿠빅 리포 추가 후 apt 업데이트</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-포드맨-설치\"><a href=\"#4-포드맨-설치\" class=\"headerlink\" title=\"4. 포드맨 설치\"></a>4. 포드맨 설치</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt -y install podman</span><br></pre></td></tr></table></figure>\n\n<p>4번 과정까지 마치고 나면 커맨드에서 podman 을 인식할 수 있게 된다.</p>\n",
            "tags": [
                "podman",
                "ubuntu",
                "배포"
            ]
        },
        {
            "id": "https://coding-coconut.com/post/clv4m958e00066m5o0okl3zml/",
            "url": "https://coding-coconut.com/post/clv4m958e00066m5o0okl3zml/",
            "title": "EC2에 도메인 바인딩하기",
            "date_published": "2023-04-19T02:41:06.000Z",
            "content_html": "<h2 id=\"도메인-로드밸런서-대상그룹-보안규칙-EC2-설정하기\"><a href=\"#도메인-로드밸런서-대상그룹-보안규칙-EC2-설정하기\" class=\"headerlink\" title=\"도메인-로드밸런서-대상그룹-보안규칙-EC2 설정하기\"></a>도메인-로드밸런서-대상그룹-보안규칙-EC2 설정하기</h2><blockquote>\n<p>도메인 접근 -&gt; 내부 포트 접근<br>80|443 -&gt; 8102</p>\n</blockquote>\n<ul>\n<li>접근 가능 VPC 일치에 주의</li>\n</ul>\n<ol>\n<li>EC2인스턴스에 보안그룹 추가하여 포트번호 뜷기 (예: 8102)</li>\n<li>대상그룹의 포트를 EC2인스턴스의 포트번호와 일치시키기 인스턴스:8102 대상그룹:8102(HTTP)</li>\n<li>생성한 대상그룹에 대상 등록으로 EC2인스턴스 바인딩</li>\n<li>대상그룹에 등록된 EC2인스턴스의 헬스체크를 기다리기</li>\n<li>로드밸런서 생성하기</li>\n<li>가용 영역 선택, 생성과정 중 만들어놓은 대상그룹 바인딩시키기</li>\n<li>보안그룹은 웹 전용으로 하기(80,443을 뜷는 보안그룹)</li>\n<li>리스너에서 HTTPS 443 추가, 인증서 선택하기</li>\n<li>기존에 묶인 80리스너를 443리디렉션에 301 응답으로 바꾸기</li>\n</ol>\n",
            "tags": [
                "aws",
                "배포"
            ]
        },
        {
            "id": "https://coding-coconut.com/post/clv4m958h000j6m5obu978ok0/",
            "url": "https://coding-coconut.com/post/clv4m958h000j6m5obu978ok0/",
            "title": "Linux 서버에서 https 인증과 Apache2 프록시패스 설정하기",
            "date_published": "2022-08-24T09:14:09.000Z",
            "content_html": "<h3 id=\"들어가며\"><a href=\"#들어가며\" class=\"headerlink\" title=\"들어가며\"></a>들어가며</h3><p>인증서 발급방법은 기존에 알고있어서 문제가 되지 않았는데 아파치 설정파일 만지는 법을 까먹어서 한동안 설정파일과 씨름했다.. -.-;;<br>로그인한 유저가 관리자 권한일 경우 굳이 sudo를 입력하지 않아도 된다!</p>\n<h3 id=\"0-apache2-를-깔려면-apt를-사용해야-하므로-업데이트가-필요\"><a href=\"#0-apache2-를-깔려면-apt를-사용해야-하므로-업데이트가-필요\" class=\"headerlink\" title=\"0. apache2 를 깔려면 apt를 사용해야 하므로 업데이트가 필요\"></a>0. apache2 를 깔려면 apt를 사용해야 하므로 업데이트가 필요</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-linux-전용-apache2-설치\"><a href=\"#1-linux-전용-apache2-설치\" class=\"headerlink\" title=\"1. linux 전용 apache2 설치\"></a>1. linux 전용 apache2 설치</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-000-default-conf-편집\"><a href=\"#2-000-default-conf-편집\" class=\"headerlink\" title=\"2. 000-default.conf 편집\"></a>2. 000-default.conf 편집</h3><p>위치는 리눅스 우분투 서버18 기준 맨~ 위 디렉토리 /etc/apache2/site-available/000-default.conf 이다<br>vi 로 편집하거나 (apache2 를 처음 설치하게 되면 기본으로 파일설정 권한이 읽기전용이다 -.-;;;)</p>\n<blockquote>\n<p>파일 권한 수정(읽기 쓰기 실행 다 허용)</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 000-default.conf[혹은 디렉토리]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>000-default.conf 를 아래처럼 편집한 후 저장<br>vi 명령어를 사용해서 즉석으로 편집해도 되고 파일질라같은 ftp 응용프로그램을 이용해서 로컬에서 작성하고 덮어쓰기해도 좋다.<br>vi 명령어일 경우 저장하고 나가기는 esc + :wq!이다</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule 구문을 써 줘야 ProxyPass가 작동한다. 이거 미리 설정하면 아래 파일을 실행시키는 스크립트 작성할 필요 x</span></span><br><span class=\"line\">LoadModule proxy_module modules/mod_proxy.so</span><br><span class=\"line\">LoadModule proxy_http_module modules/mod_proxy_http.so</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerAdmin webmaster@localhost</span><br><span class=\"line\">\tDocumentRoot /var/www/html</span><br><span class=\"line\"></span><br><span class=\"line\">\tServerName yourdomain.com</span><br><span class=\"line\">\tServerAlias yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\">\tProxyRequests Off</span><br><span class=\"line\">\tProxyPreserveHost On</span><br><span class=\"line\">    <span class=\"comment\"># 80으로 받으면 아래 주소로 넘긴다. 여기서의 로컬호스트는 apache가 돌아가는 컴퓨터의 로컬호스트.</span></span><br><span class=\"line\">\t<span class=\"comment\">#주소창에서 보여지는 주소도 서버네임으로 바뀌어서 보여진다.</span></span><br><span class=\"line\">  \tProxyPass / http://localhost:8080/</span><br><span class=\"line\">  \tProxyPassReverse / http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\">\tErrorLog <span class=\"variable\">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class=\"line\">\tCustomLog <span class=\"variable\">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class=\"line\"></span><br><span class=\"line\">    RewriteEngine on</span><br><span class=\"line\">    RewriteCond %&#123;SERVER_NAME&#125; =content-ad-dev.fastview.co.kr</span><br><span class=\"line\">    RewriteRule ^ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R=permanent]</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Apache2-서비스-재가동\"><a href=\"#3-Apache2-서비스-재가동\" class=\"headerlink\" title=\"3. Apache2 서비스 재가동\"></a>3. Apache2 서비스 재가동</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Snap-설치-이미-깔려-있으면-생략\"><a href=\"#4-Snap-설치-이미-깔려-있으면-생략\" class=\"headerlink\" title=\"4. Snap 설치(이미 깔려 있으면 생략)\"></a>4. Snap 설치(이미 깔려 있으면 생략)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install core; sudo snap refresh core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Snap으로-Certbot-설치\"><a href=\"#5-Snap으로-Certbot-설치\" class=\"headerlink\" title=\"5. Snap으로 Certbot 설치\"></a>5. Snap으로 Certbot 설치</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install --classic certbot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-Apache-사양으로-인증서-발급-apache2-서비스가-가동-중이고-80포트가-뜷려있어야-함\"><a href=\"#6-Apache-사양으로-인증서-발급-apache2-서비스가-가동-중이고-80포트가-뜷려있어야-함\" class=\"headerlink\" title=\"6. Apache 사양으로 인증서 발급(apache2 서비스가 가동 중이고 80포트가 뜷려있어야 함)\"></a>6. Apache 사양으로 인증서 발급(apache2 서비스가 가동 중이고 80포트가 뜷려있어야 함)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --apache</span><br></pre></td></tr></table></figure>\n<p>머라머라 나오는데 읽어보면 도메인 입력해달라는것과 인증서 만료 시 발송할 이메일좀 설정해달라는 내용<br>그리고.. 뭔가를 보낸다는 내용인데 이 항목은 생략해도 됨</p>\n<p>만약 과정이 꼬여서 000-default.conf를 다시 수정해야 하면, 인증서파일 재설정을 하면 된다.</p>\n<p>인증서가 이미 존재할 때 위 명령어를 입력하면 인증서 목록이 뜨는데 원하는 도메인의 번호를 입력한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: Attempt to reinstall this existing certificate</span><br></pre></td></tr></table></figure>\n\n<p>해당 항목을 선택하면 Certbot의 인증서 파일(000-default-le-ssl.conf)이 다시 갱신된다.</p>\n<h3 id=\"7-확인\"><a href=\"#7-확인\" class=\"headerlink\" title=\"7. 확인\"></a>7. 확인</h3><p>웹페이지에 접속해서 자물쇠 표시가 뜨면 성공!</p>\n",
            "tags": [
                "배포",
                "certbot",
                "https",
                "인증서",
                "apache"
            ]
        },
        {
            "id": "https://coding-coconut.com/post/clv4m958f000d6m5ogx10hjq6/",
            "url": "https://coding-coconut.com/post/clv4m958f000d6m5ogx10hjq6/",
            "title": "Hexo 배포 커맨드와 커스텀 도메인에 관한 이슈",
            "date_published": "2022-07-28T00:56:12.000Z",
            "content_html": "<h3 id=\"문제점\"><a href=\"#문제점\" class=\"headerlink\" title=\"문제점\"></a>문제점</h3><p> 기존 도메인에서 블로그 전용 도메인을 구매하고, 깃허브 페이지에 연결해 놓았었는데<br>Hexo로 만든 블로그 프로젝트에서 <code>hexo deploy</code> 커맨드를 이용해 배포하면<br>깃허브 페이지의 퍼블리싱된 커스텀 도메인이 초기화가 되는 이슈가 발생했다.</p>\n<h3 id=\"해결\"><a href=\"#해결\" class=\"headerlink\" title=\"해결\"></a>해결</h3><p>이를 해결하려면 hexo 의 블로그 프로젝트 source 폴더에<br>CNAME 파일을 생성하고, 안에 퍼블리싱할 커스텀 도메인을 입력한다.</p>\n<p><img src=\"/img/postimg/cname_file.png\" alt=\"cname_file\"></p>\n<p>이후 <code>hexo deploy</code> 커맨드를 입력하여 배포해도 깃허브 페이지의 커스텀 도메인이 해제되지 않는다.</p>\n",
            "tags": [
                "hexo",
                "배포",
                "github_page",
                "issue",
                "custom_domain",
                "hexo_deploy"
            ]
        }
    ]
}