{
    "version": "https://jsonfeed.org/version/1",
    "title": "Coding Coconut • All posts by \"certbot2\" tag",
    "description": "주니어 웹 프론트엔드/백엔드 개발자. 공부하는 것도, 노는 것도 그만큼 좋아합니다. 덕질 없으면 어떻게 살아? ",
    "home_page_url": "https://coding-coconut.com",
    "items": [
        {
            "id": "https://coding-coconut.com/2022/08/24/Linux-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-https-%EC%9D%B8%EC%A6%9D%EA%B3%BC-Apache2-%ED%94%84%EB%A1%9D%EC%8B%9C%ED%8C%A8%EC%8A%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/",
            "url": "https://coding-coconut.com/2022/08/24/Linux-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-https-%EC%9D%B8%EC%A6%9D%EA%B3%BC-Apache2-%ED%94%84%EB%A1%9D%EC%8B%9C%ED%8C%A8%EC%8A%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/",
            "title": "Linux 서버에서 https 인증과 Apache2 프록시패스 설정하기",
            "date_published": "2022-08-24T09:14:09.000Z",
            "content_html": "<h3 id=\"들어가며\"><a href=\"#들어가며\" class=\"headerlink\" title=\"들어가며\"></a>들어가며</h3><p>인증서 발급방법은 기존에 알고있어서 문제가 되지 않았는데 아파치 설정파일 만지는 법을 까먹어서 한동안 설정파일과 씨름했다.. -.-;;<br>로그인한 유저가 관리자 권한일 경우 굳이 sudo를 입력하지 않아도 된다!</p>\n<h3 id=\"0-apache2-를-깔려면-apt를-사용해야-하므로-업데이트가-필요\"><a href=\"#0-apache2-를-깔려면-apt를-사용해야-하므로-업데이트가-필요\" class=\"headerlink\" title=\"0. apache2 를 깔려면 apt를 사용해야 하므로 업데이트가 필요\"></a>0. apache2 를 깔려면 apt를 사용해야 하므로 업데이트가 필요</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-linux-전용-apache2-설치\"><a href=\"#1-linux-전용-apache2-설치\" class=\"headerlink\" title=\"1. linux 전용 apache2 설치\"></a>1. linux 전용 apache2 설치</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-000-default-conf-편집\"><a href=\"#2-000-default-conf-편집\" class=\"headerlink\" title=\"2. 000-default.conf 편집\"></a>2. 000-default.conf 편집</h3><p>위치는 리눅스 우분투 서버18 기준 맨~ 위 디렉토리 /etc/apache2/site-available/000-default.conf 이다<br>vi 로 편집하거나 (apache2 를 처음 설치하게 되면 기본으로 파일설정 권한이 읽기전용이다 -.-;;;)</p>\n<blockquote>\n<p>파일 권한 수정(읽기 쓰기 실행 다 허용)</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 000-default.conf[혹은 디렉토리]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>000-default.conf 를 아래처럼 편집한 후 저장<br>vi 명령어를 사용해서 즉석으로 편집해도 되고 파일질라같은 ftp 응용프로그램을 이용해서 로컬에서 작성하고 덮어쓰기해도 좋다.<br>vi 명령어일 경우 저장하고 나가기는 esc + :wq!이다</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#LoadModule 구문을 써 줘야 ProxyPass가 작동한다. 이거 미리 설정하면 아래 파일을 실행시키는 스크립트 작성할 필요 x</span></span><br><span class=\"line\">LoadModule proxy_module modules/mod_proxy.so</span><br><span class=\"line\">LoadModule proxy_http_module modules/mod_proxy_http.so</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerAdmin webmaster@localhost</span><br><span class=\"line\">\tDocumentRoot /var/www/html</span><br><span class=\"line\"></span><br><span class=\"line\">\tServerName yourdomain.com</span><br><span class=\"line\">\tServerAlias yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\">\tProxyRequests Off</span><br><span class=\"line\">\tProxyPreserveHost On</span><br><span class=\"line\">    <span class=\"comment\"># 80으로 받으면 아래 주소로 넘긴다. 여기서의 로컬호스트는 apache가 돌아가는 컴퓨터의 로컬호스트.</span></span><br><span class=\"line\">\t<span class=\"comment\">#주소창에서 보여지는 주소도 서버네임으로 바뀌어서 보여진다.</span></span><br><span class=\"line\">  \tProxyPass / http://localhost:8080/</span><br><span class=\"line\">  \tProxyPassReverse / http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\">\tErrorLog <span class=\"variable\">$&#123;APACHE_LOG_DIR&#125;</span>/error.log</span><br><span class=\"line\">\tCustomLog <span class=\"variable\">$&#123;APACHE_LOG_DIR&#125;</span>/access.log combined</span><br><span class=\"line\"></span><br><span class=\"line\">    RewriteEngine on</span><br><span class=\"line\">    RewriteCond %&#123;SERVER_NAME&#125; =content-ad-dev.fastview.co.kr</span><br><span class=\"line\">    RewriteRule ^ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R=permanent]</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Apache2-서비스-재가동\"><a href=\"#3-Apache2-서비스-재가동\" class=\"headerlink\" title=\"3. Apache2 서비스 재가동\"></a>3. Apache2 서비스 재가동</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Snap-설치-이미-깔려-있으면-생략\"><a href=\"#4-Snap-설치-이미-깔려-있으면-생략\" class=\"headerlink\" title=\"4. Snap 설치(이미 깔려 있으면 생략)\"></a>4. Snap 설치(이미 깔려 있으면 생략)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install core; sudo snap refresh core</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Snap으로-Certbot-설치\"><a href=\"#5-Snap으로-Certbot-설치\" class=\"headerlink\" title=\"5. Snap으로 Certbot 설치\"></a>5. Snap으로 Certbot 설치</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo snap install --classic certbot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-Apache-사양으로-인증서-발급-apache2-서비스가-가동-중이고-80포트가-뜷려있어야-함\"><a href=\"#6-Apache-사양으로-인증서-발급-apache2-서비스가-가동-중이고-80포트가-뜷려있어야-함\" class=\"headerlink\" title=\"6. Apache 사양으로 인증서 발급(apache2 서비스가 가동 중이고 80포트가 뜷려있어야 함)\"></a>6. Apache 사양으로 인증서 발급(apache2 서비스가 가동 중이고 80포트가 뜷려있어야 함)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --apache</span><br></pre></td></tr></table></figure>\n<p>머라머라 나오는데 읽어보면 도메인 입력해달라는것과 인증서 만료 시 발송할 이메일좀 설정해달라는 내용<br>그리고.. 뭔가를 보낸다는 내용인데 이 항목은 생략해도 됨</p>\n<p>만약 과정이 꼬여서 000-default.conf를 다시 수정해야 하면, 인증서파일 재설정을 하면 된다.</p>\n<p>인증서가 이미 존재할 때 위 명령어를 입력하면 인증서 목록이 뜨는데 원하는 도메인의 번호를 입력한다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1: Attempt to reinstall this existing certificate</span><br></pre></td></tr></table></figure>\n\n<p>해당 항목을 선택하면 Certbot의 인증서 파일(000-default-le-ssl.conf)이 다시 갱신된다.</p>\n<h3 id=\"7-확인\"><a href=\"#7-확인\" class=\"headerlink\" title=\"7. 확인\"></a>7. 확인</h3><p>웹페이지에 접속해서 자물쇠 표시가 뜨면 성공!</p>\n",
            "tags": [
                "certbot2",
                "배포",
                "https",
                "인증서",
                "apache"
            ]
        },
        {
            "id": "https://coding-coconut.com/2021/08/13/Certbot%EC%9C%BC%EB%A1%9C-https-%EC%84%9C%EB%B8%8C%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/",
            "url": "https://coding-coconut.com/2021/08/13/Certbot%EC%9C%BC%EB%A1%9C-https-%EC%84%9C%EB%B8%8C%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0/",
            "title": "Certbot으로 https 서브도메인 등록하기",
            "date_published": "2021-08-12T23:55:12.000Z",
            "content_html": "<p>시행착오가 좀 많았다.</p>\n<p>회사서 홈페이지를 새로 구축했다. 구축하는 김에 구식이었던 정적 호스팅을 버리고.. 서버도 올릴 수 있도록 요즘 클라우드 호스팅으로 갈아탔다!</p>\n<p>AWS EC2처럼 가상컴퓨터지만.. 클라우드라서 훨씬 가격이 저렴하다.  (사실 써본 입장으로써 AWS는 좀 깡패라는 생각이 든다 가격 측정상…ㅡ,.ㅡ)</p>\n<p>클라우드 중 가장 싸다는 Vultr호스팅을 이용하고 싶었으나.. 회원가입할때 1인 1계정 원칙이 있는데, 하필이면 잘 모르는 초짜 고고넛이 회원가입할 때 실수를 해서 락이 걸렸다. </p>\n<p>문의 처리는 빨랐지만  Vultr가 해외 호스팅 서버라 처리하는게 좀 번거로워서..  고심한 끝에,</p>\n<p>cafe24의 클라우드 호스팅 서비스를 이용하기로 결정했다.</p>\n<p>가격도 Vultr 랑 비교해서 둘이 비슷하다! 성능은 cafe24 클라우드 호스팅 쪽이 램을 더 잘 지원하고.. 용량이 쪼끔 더 작다.(벌쳐는 램이 작고 용량이 큰 편) 그리고.. 벌쳐는 클라우드 서버를 사면 공인 IP도 같이 주는데 cafe24쪽은 공인 IP를 따로 사야한다.</p>\n<p>사내 홈피처럼 공적인 부분은 공인 IP가 꼭 필요하므로~ 공인 IP도 클라우드 서버와 같이 구매했다.</p>\n<p>개인 블로그 구축을 경험삼아 Ubuntu 18 바이오닉 서버에 Node.js Express서버를 배포하려고 했다.</p>\n<p>cafe24클라우드의 특성상 보안을 위해 SSH키를 사용해야만 접속할 수 있고,</p>\n<p>SSH 키는 cafe24클라우드가 서버 살 때 키까지 만들어준다.</p>\n<p>SSH 키로 접속할때 고고낫은 Putty를 이용했으므로, 키를 읽어서 변환해주는 puttygen이 필요했다.</p>\n<p>홈피서 pem 키를 받고 puttygen에서 불러오기를 하면 exe프로그램이 putty전용으로 key를 변환해준다.</p>\n<p>save Private Key를 하면 ppk로 내려지는데,</p>\n<p>Putty &gt; Connection &gt; SSH &gt; Auth 에서 맨 밑 항목을 보면 Private key file for authentication 하고 ppk키를 등록하는 부분이 있다.</p>\n<p>푸티에도 등록해주고, 파일질라에도 상단의 사이트 관리자 항목을 보면 키를 등록해주는 부분이 있다.</p>\n<blockquote>\n<p>❕  Putty 와 Filezila 연결을 위한 방화벽 설정은 cafe24 클라우드 웹콘솔 화면에서 사람이 정말~ 설정하기 쉽도록 되어 있다. ufw 치고.. 막 콘솔 창 안 들여다봐도 된다 ㅎㅎ</p>\n</blockquote>\n<p>여튼 key를 이용해서 putty로 ssh접속하면, 지정된 계정 이름으로 접속하게 되어있는데, 이 계정한텐 root권한이 없어서 명령수행 할 때 일시적으로 제약을 해제해줘야 했다.</p>\n<p><code>sudo -i</code></p>\n<p>파일질라로 배포할 파일 업로드하는 과정은 생략한다. Express(Node)는 일종의 SSR서버이므로~ 직접 접근하게 하면 좀 위험하고 정적 서버인 apache를 통해 프록시하면 좋을 것 같아서 apache2도 깔았다. 프록시설정하는 과정도 생략한다!</p>\n<p>인터넷 상으로 접속 확인하고 ip도메인 연결하고 도메인 주소를 치면 사이트가 다 뜨는 것까지 확인했다.(다만 http일 뿐이지..)</p>\n<h3 id=\"본론\"><a href=\"#본론\" class=\"headerlink\" title=\"본론!\"></a>본론!</h3><p>서론이 쫌 길었다.. 클라우드 얘기만 대판 ..ㅡ.ㅡ) 이제 https를 등록할 차례인데,</p>\n<p>Certbot이 너무 친절한게.. 공식 사이트 가서 서버 종류랑 컴퓨터 운영체제를 입력하면 어떻게 깔아야 하는지 튜토리얼이 너무 잘 되어있다…ㅠ.ㅠ</p>\n<p><a href=\"https://certbot.eff.org/lets-encrypt/ubuntubionic-apache\">https://certbot.eff.org/lets-encrypt/ubuntubionic-apache</a></p>\n<p>아파치 사양으로 하라는 대로 했다. 여기까진 아무 문제 없었다. 근데 왠걸.. 선택지가 두개 뜨는데, 한 도메인은 www를 포함하고, 다른 한 도메인은 www를 포함하지 않는 도메인을 보여주면서 둘 중 인증서 발급 받을 주소를 하나 택하라고 한다</p>\n<p>둘다 발급받을건데.? 하고 서트봇 인증서 발급 명령을 두번 실행하면</p>\n<p>인증서는 두개인데.. 사이트 들어가서 확인해봤더니만,</p>\n<p>정작 적용은 맨 마지막에 발급받은 인증서 하나만 되는 것 같았다.</p>\n<p>여기서 좀 많이 해멨는데, 방법은.. 인증서를 하나만 발급받고 (www든 www가 아니든)</p>\n<p>아래처럼 서브도메인으로 인증서를 확장하는 명령을 내리는 것이었다.</p>\n<p><code>certbot --expand -d existing.com,example.com,newdomain.com</code></p>\n<p>이렇게 하면 하나의 인증서 아래에 여러 서브도메인이 붙는다.</p>\n<p>여튼 이걸로 도메인 여러개 발급받는 것 해결했음…</p>\n",
            "tags": [
                "certbot2"
            ]
        }
    ]
}